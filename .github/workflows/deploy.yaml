name: Deploy

on:
  push:
    branches: [gitops]
    paths: ['src/**']
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force build all services (ignore change detection)'
        required: false
        default: false
        type: boolean
      services:
        description: 'Specific services to build (comma-separated: ui,catalog,cart,orders,checkout)'
        required: false
        default: ''
        type: string

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.changed-services }}
      matrix: ${{ steps.changes.outputs.matrix }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: changes
        run: |
          SERVICES=("ui" "catalog" "cart" "checkout" "orders")
          CHANGED_SERVICES=()
          
          echo "🔍 Checking for changes in services..."
          echo "📋 Event: ${{ github.event_name }}"
          echo "📋 Ref: ${{ github.ref }}"
          echo "📋 SHA: ${{ github.sha }}"
          
          # Show git log for debugging
          echo "📋 Recent commits:"
          git log --oneline -3 || echo "Could not show git log"
          
          # Handle manual trigger options
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.force_build_all }}" == "true" ]; then
              echo "🔄 Manual trigger - force building all services"
              CHANGED_SERVICES=("ui" "catalog" "cart" "checkout" "orders")
            elif [ -n "${{ github.event.inputs.services }}" ]; then
              echo "🔄 Manual trigger - building specified services: ${{ github.event.inputs.services }}"
              IFS=',' read -ra SPECIFIED_SERVICES <<< "${{ github.event.inputs.services }}"
              for service in "${SPECIFIED_SERVICES[@]}"; do
                service=$(echo "$service" | xargs) # trim whitespace
                if [[ " ${SERVICES[@]} " =~ " ${service} " ]]; then
                  CHANGED_SERVICES+=("$service")
                  echo "✅ Added specified service: $service"
                else
                  echo "⚠️ Invalid service specified: $service (valid: ${SERVICES[*]})"
                fi
              done
            else
              echo "🔄 Manual trigger - building all services (default)"
              CHANGED_SERVICES=("ui" "catalog" "cart" "checkout" "orders")
            fi
          else
            # Check for changes in each service
            echo "📋 Changed files in this push:"
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || git diff --name-only HEAD^ HEAD 2>/dev/null || git show --name-only --format="" HEAD 2>/dev/null || echo "")
            
            if [ -z "$CHANGED_FILES" ]; then
              echo "⚠️ Could not detect changed files, building all services as fallback"
              CHANGED_SERVICES=("ui" "catalog" "cart" "checkout" "orders")
            else
              echo "$CHANGED_FILES"
              
              for service in "${SERVICES[@]}"; do
                if echo "$CHANGED_FILES" | grep -q "^src/$service/"; then
                  CHANGED_SERVICES+=("$service")
                  echo "✅ Changes detected in: $service"
                else
                  echo "⏭️ No changes in: $service"
                fi
              done
            fi
          fi
          
          # Check if we have any changes
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "❌ No services changed"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create matrix for changed services only
          MATRIX_JSON="["
          for i in "${!CHANGED_SERVICES[@]}"; do
            if [ $i -gt 0 ]; then
              MATRIX_JSON+=","
            fi
            MATRIX_JSON+="\"${CHANGED_SERVICES[$i]}\""
          done
          MATRIX_JSON+="]"
          
          echo "changed-services=${CHANGED_SERVICES[*]}" >> $GITHUB_OUTPUT
          echo "matrix={\"service\":$MATRIX_JSON}" >> $GITHUB_OUTPUT
          echo "has-changes=true" >> $GITHUB_OUTPUT
          
          echo "📊 Services to build: ${CHANGED_SERVICES[*]}"
          echo "📊 Generated matrix: {\"service\":$MATRIX_JSON}"

  deploy:
    name: Deploy ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    permissions:
      contents: write
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          echo "🔐 Validating required GitHub secrets..."
          
          MISSING_SECRETS=()
          
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            MISSING_SECRETS+=("AWS_ACCESS_KEY_ID")
          fi
          
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            MISSING_SECRETS+=("AWS_SECRET_ACCESS_KEY")
          fi
          
          if [ -z "${{ secrets.AWS_ACCOUNT_ID }}" ]; then
            MISSING_SECRETS+=("AWS_ACCOUNT_ID")
          fi
          
          if [ -z "${{ secrets.AWS_REGION }}" ]; then
            MISSING_SECRETS+=("AWS_REGION")
          fi
          
          if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
            echo "❌ Missing required GitHub secrets:"
            for secret in "${MISSING_SECRETS[@]}"; do
              echo "   - ${secret}"
            done
            echo ""
            echo "Please configure these secrets in your GitHub repository:"
            echo "Repository Settings > Secrets and variables > Actions"
            exit 1
          fi
          
          echo "✅ All required secrets are configured"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push ${{ matrix.service }}
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/retail-store-${SERVICE}"
          
          echo "🔨 Building ${SERVICE}:${TAG}"
          echo "📋 Service: ${SERVICE}"
          echo "📋 Tag: ${TAG}"
          echo "📋 ECR Repository: ${ECR_REPO}"
          echo "📋 AWS Region: ${{ env.AWS_REGION }}"
          
          # Validate required environment variables
          if [ -z "${AWS_ACCOUNT_ID}" ]; then
            echo "❌ AWS_ACCOUNT_ID secret is not set"
            exit 1
          fi
          
          if [ -z "${{ env.AWS_REGION }}" ]; then
            echo "❌ AWS_REGION secret is not set"
            exit 1
          fi
          
          # Check if Dockerfile exists
          if [ ! -f "src/${SERVICE}/Dockerfile" ]; then
            echo "❌ Dockerfile not found at src/${SERVICE}/Dockerfile"
            exit 1
          fi
          
          echo "📋 Dockerfile found at src/${SERVICE}/Dockerfile"
          
          # Create ECR repo if it doesn't exist
          echo "🏗️ Ensuring ECR repository exists..."
          if aws ecr describe-repositories --repository-names "retail-store-${SERVICE}" 2>/dev/null; then
            echo "✅ ECR repository retail-store-${SERVICE} already exists"
          else
            echo "🆕 Creating ECR repository retail-store-${SERVICE}..."
            aws ecr create-repository --repository-name "retail-store-${SERVICE}" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
            echo "✅ ECR repository created successfully"
          fi
          
          # Build Docker image
          echo "🔨 Building Docker image..."
          if docker build -t "${ECR_REPO}:${TAG}" -t "${ECR_REPO}:latest" "src/${SERVICE}/"; then
            echo "✅ Docker build successful"
          else
            echo "❌ Docker build failed"
            exit 1
          fi
          
          # Push images
          echo "📤 Pushing images to ECR..."
          if docker push "${ECR_REPO}:${TAG}"; then
            echo "✅ Successfully pushed ${ECR_REPO}:${TAG}"
          else
            echo "❌ Failed to push ${ECR_REPO}:${TAG}"
            exit 1
          fi
          
          if docker push "${ECR_REPO}:latest"; then
            echo "✅ Successfully pushed ${ECR_REPO}:latest"
          else
            echo "❌ Failed to push ${ECR_REPO}:latest"
            exit 1
          fi
          
          echo "✅ Build and push completed successfully"
          echo "ECR_REPO=${ECR_REPO}" >> $GITHUB_ENV

      - name: Update Helm values for ${{ matrix.service }}
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          ECR_REPO="${{ env.ECR_REPO }}"
          VALUES_FILE="src/${SERVICE}/chart/values.yaml"
          
          echo "📝 Updating Helm values for ${SERVICE}"
          echo "📋 Repository: ${ECR_REPO}"
          echo "📋 Tag: ${TAG}"
          echo "📋 Values file: ${VALUES_FILE}"
          
          # Validate file exists
          if [[ ! -f "${VALUES_FILE}" ]]; then
            echo "❌ Values file not found: ${VALUES_FILE}"
            echo "📋 Available files in src/${SERVICE}/:"
            ls -la "src/${SERVICE}/" || echo "Directory not found"
            if [ -d "src/${SERVICE}/chart" ]; then
              echo "📋 Files in chart directory:"
              ls -la "src/${SERVICE}/chart/" || echo "Chart directory empty"
            fi
            exit 1
          fi
          
          echo "✅ Values file found"
          
          # Show file content for debugging
          echo "📋 Current values.yaml content:"
          cat "${VALUES_FILE}"
          
          # Show before state
          echo "📋 Before update (main service image):"
          grep -A3 "^image:" "${VALUES_FILE}" | head -4 || echo "No main image section found"
          
          # Create a backup
          cp "${VALUES_FILE}" "${VALUES_FILE}.backup"
          
          # Update only the main service image (first occurrence under 'image:' section)
          # This preserves infrastructure component images (mysql, redis, postgresql, rabbitmq, dynamodb)
          awk -v repo="${ECR_REPO}" -v tag="${TAG}" '
          BEGIN { in_main_image = 0; updated_repo = 0; updated_tag = 0 }
          /^image:/ { in_main_image = 1; print; next }
          in_main_image && /^[[:space:]]*repository:/ && !updated_repo { 
            print "  repository: " repo; updated_repo = 1; next 
          }
          in_main_image && /^[[:space:]]*tag:/ && !updated_tag { 
            print "  tag: \"" tag "\""; updated_tag = 1; next 
          }
          /^[a-zA-Z]/ && !/^image:/ { in_main_image = 0 }
          { print }
          ' "${VALUES_FILE}.backup" > "${VALUES_FILE}"
          
          # Validate the update worked
          echo "📋 Checking if update was successful..."
          if grep -q "${ECR_REPO}" "${VALUES_FILE}" && grep -q "\"${TAG}\"" "${VALUES_FILE}"; then
            echo "✅ Successfully updated ${VALUES_FILE}"
            echo "📋 After update (main service image):"
            grep -A3 "^image:" "${VALUES_FILE}" | head -4
            
            # Show that infrastructure images are preserved
            echo "🔒 Infrastructure images preserved:"
            grep -A1 "repository:" "${VALUES_FILE}" | grep -E "(mysql|redis|postgres|rabbitmq|dynamodb-local)" || echo "No infrastructure images found"
            
            echo "📋 Updated values.yaml content:"
            cat "${VALUES_FILE}"
          else
            echo "❌ Update failed - restoring backup"
            echo "📋 Expected repository: ${ECR_REPO}"
            echo "📋 Expected tag: \"${TAG}\""
            echo "📋 Actual content after update:"
            cat "${VALUES_FILE}"
            mv "${VALUES_FILE}.backup" "${VALUES_FILE}"
            exit 1
          fi
          
          # Remove backup
          rm "${VALUES_FILE}.backup"

      - name: Commit Helm changes for ${{ matrix.service }}
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          
          git config --local user.email "gitops@github.com"
          git config --local user.name "GitOps Bot"
          
          if ! git diff --quiet "src/${SERVICE}/chart/values.yaml"; then
            git add "src/${SERVICE}/chart/values.yaml"
            git commit -m "🚀 Update ${SERVICE} Helm chart to ${TAG} - ECR: retail-store-${SERVICE} - Commit: ${{ github.sha }}"
            
            # Push with retry logic
            for i in {1..3}; do
              if git push origin gitops; then
                echo "✅ Successfully pushed Helm update for ${SERVICE}"
                break
              else
                echo "⚠️ Push failed for ${SERVICE}, attempt $i/3. Retrying..."
                git pull --rebase origin gitops
                sleep 2
              fi
              
              if [ $i -eq 3 ]; then
                echo "❌ Failed to push ${SERVICE} after 3 attempts"
                exit 1
              fi
            done
          else
            echo "📝 No Helm changes to commit for ${SERVICE}"
          fi

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** gitops" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-changes.outputs.has-changes }}" == "true" ]; then
            echo "**Changed Services:** ${{ needs.detect-changes.outputs.changed-services }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.deploy.result }}" == "success" ]; then
              echo "✅ **Status:** Deployment successful" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Actions completed:**" >> $GITHUB_STEP_SUMMARY
              echo "- 🔨 Built and pushed Docker images to ECR" >> $GITHUB_STEP_SUMMARY
              echo "- 📝 Updated Helm chart values" >> $GITHUB_STEP_SUMMARY
              echo "- 💾 Committed changes to repository" >> $GITHUB_STEP_SUMMARY
              echo "- 🔄 ArgoCD will sync automatically" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**ECR Repositories:**" >> $GITHUB_STEP_SUMMARY
              for service in ${{ needs.detect-changes.outputs.changed-services }}; do
                echo "- \`${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/retail-store-\${service}\`" >> $GITHUB_STEP_SUMMARY
              done
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Image Tag:** \`$(echo ${{ github.sha }} | cut -c1-7)\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Status:** Deployment failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
              echo "1. Check the workflow logs for detailed error messages" >> $GITHUB_STEP_SUMMARY
              echo "2. Verify all GitHub secrets are configured correctly" >> $GITHUB_STEP_SUMMARY
              echo "3. Ensure AWS credentials have proper ECR permissions" >> $GITHUB_STEP_SUMMARY
              echo "4. Verify Dockerfiles exist in service directories" >> $GITHUB_STEP_SUMMARY
              echo "5. Check Helm values.yaml files are properly formatted" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ **Status:** No services changed - no deployment needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To trigger a manual build:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Go to Actions tab in GitHub" >> $GITHUB_STEP_SUMMARY
            echo "2. Select 'Deploy' workflow" >> $GITHUB_STEP_SUMMARY
            echo "3. Click 'Run workflow'" >> $GITHUB_STEP_SUMMARY
            echo "4. Choose options and run" >> $GITHUB_STEP_SUMMARY
          fi
name: Terraform Infrastructure (Assume Role)

on:
  push:
    branches: [gitops, stage]
    paths: ["terraform/**"]
  pull_request:
    branches: [gitops, stage]
    paths: ["terraform/**"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, stage)"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stage
      action:
        description: "Terraform action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

concurrency:
  group: terraform-${{ github.ref }}-${{ github.event.inputs.environment || 'dev' }}
  cancel-in-progress: false

env:
  TF_VERSION: "1.9.8"
  AWS_REGION: ${{ secrets.AWS_REGION }}

# Required for OIDC
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  detect-changes:
    name: Detect Terraform Changes
    runs-on: ubuntu-latest
    outputs:
      terraform-changed: ${{ steps.changes.outputs.terraform-changed }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" == "refs/heads/stage" ]; then
            ENV="stage"
          else
            ENV="dev"
          fi
          
          echo "environment=${ENV}" >> $GITHUB_OUTPUT
          echo "📋 Environment: ${ENV}"

      - name: Detect Terraform changes
        id: changes
        run: |
          echo "🔍 Checking for Terraform changes..."
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "🔄 Manual trigger - processing Terraform"
            echo "terraform-changed=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "🔄 Pull request - processing Terraform"
            echo "terraform-changed=true" >> $GITHUB_OUTPUT
          else
            # Check for changes in terraform directory
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || git show --name-only --format="" HEAD 2>/dev/null || echo "")
            
            if echo "$CHANGED_FILES" | grep -q "^terraform/"; then
              echo "✅ Terraform changes detected"
              echo "terraform-changed=true" >> $GITHUB_OUTPUT
            else
              echo "⏭️ No Terraform changes detected"
              echo "terraform-changed=false" >> $GITHUB_OUTPUT
            fi
          fi

  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.terraform-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          echo "🔍 Checking Terraform formatting..."
          cd terraform
          if terraform fmt -check -recursive; then
            echo "✅ Terraform files are properly formatted"
          else
            echo "❌ Terraform files need formatting"
            echo "Run 'terraform fmt -recursive' to fix formatting issues"
            exit 1
          fi

      - name: Terraform Validate
        run: |
          echo "🔍 Validating Terraform configuration..."
          cd terraform
          terraform init -backend=false -upgrade
          if terraform validate; then
            echo "✅ Terraform configuration is valid"
          else
            echo "❌ Terraform configuration is invalid"
            exit 1
          fi

  plan:
    name: Terraform Plan (${{ needs.detect-changes.outputs.environment }})
    runs-on: ubuntu-latest
    needs: [detect-changes, validate]
    if: needs.detect-changes.outputs.terraform-changed == 'true'
    environment: ${{ needs.detect-changes.outputs.environment }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::390112040038:role/TerraformExecutionRole
          role-session-name: github-actions-terraform
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          echo "🏗️ Initializing Terraform..."
          cd terraform
          
          ENV="${{ needs.detect-changes.outputs.environment }}"
          BACKEND_CONFIG=".env/${ENV}/backend.tf"
          
          echo "📋 Environment: ${ENV}"
          echo "📋 Backend config: ${BACKEND_CONFIG}"
          
          if [ ! -f "${BACKEND_CONFIG}" ]; then
            echo "❌ Backend configuration not found: ${BACKEND_CONFIG}"
            echo "Available environments:"
            ls -la .env/
            exit 1
          fi
          
          echo "📋 Backend configuration:"
          cat "${BACKEND_CONFIG}"
          
          terraform init -backend-config="${BACKEND_CONFIG}"

      - name: Debug file structure
        run: |
          echo "📋 Checking file structure..."
          cd terraform
          echo "Current directory:"
          pwd
          echo "Contents:"
          ls -la
          echo ".env directory:"
          ls -la .env/ || echo "No .env directory"
          echo ".env/dev directory:"
          ls -la .env/dev/ || echo "No .env/dev directory"
          
      - name: Terraform Plan
        id: plan
        run: |
          echo "📋 Creating Terraform plan..."
          cd terraform
          
          ENV="${{ needs.detect-changes.outputs.environment }}"
          VARS_FILE=".env/${ENV}/vars.tfvars"
          
          echo "📋 Environment: ${ENV}"
          echo "📋 Variables file: ${VARS_FILE}"
          
          if [ ! -f "${VARS_FILE}" ]; then
            echo "❌ Variables file not found: ${VARS_FILE}"
            exit 1
          fi
          
          echo "📋 Variables:"
          cat "${VARS_FILE}"
          
          # Create plan (Terraform will assume role if configured in provider)
          terraform plan -var-file="${VARS_FILE}" -out=tfplan -detailed-exitcode
          
          # Save plan output for PR comment
          terraform show -no-color tfplan > plan_output.txt
          
          echo "✅ Terraform plan completed"

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'terraform/plan_output.txt';
            
            if (fs.existsSync(path)) {
              const plan = fs.readFileSync(path, 'utf8');
              const truncatedPlan = plan.length > 65000 ? plan.substring(0, 65000) + '\n... (truncated)' : plan;
              
              const output = `## 🏗️ Terraform Plan (${{ needs.detect-changes.outputs.environment }}) - Assume Role
              
              **Environment:** \`${{ needs.detect-changes.outputs.environment }}\`
              **Terraform Version:** \`${{ env.TF_VERSION }}\`
              **Authentication:** Base credentials + Assume Role in provider 🔐
              
              <details>
              <summary>Show Plan</summary>
              
              \`\`\`terraform
              ${truncatedPlan}
              \`\`\`
              
              </details>
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ needs.detect-changes.outputs.environment }}
          path: terraform/tfplan
          retention-days: 5

  apply:
    name: Terraform Apply (${{ needs.detect-changes.outputs.environment }})
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, plan]
    if: |
      needs.detect-changes.outputs.terraform-changed == 'true' && 
      ((github.ref == 'refs/heads/gitops' || github.ref == 'refs/heads/stage') && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: ${{ needs.detect-changes.outputs.environment }}
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::390112040038:role/TerraformExecutionRole
          role-session-name: github-actions-terraform
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ needs.detect-changes.outputs.environment }}
          path: terraform/

      - name: Terraform Init
        run: |
          echo "🏗️ Initializing Terraform for apply..."
          cd terraform
          
          ENV="${{ needs.detect-changes.outputs.environment }}"
          BACKEND_CONFIG=".env/${ENV}/backend.tf"
          
          terraform init -backend-config="${BACKEND_CONFIG}"

      - name: Terraform Apply
        run: |
          echo "🚀 Applying Terraform changes..."
          echo "📋 Environment: ${{ needs.detect-changes.outputs.environment }}"
          echo "📋 Authentication: Base credentials + Assume Role in provider"
          
          cd terraform
          
          if [ -f "tfplan" ]; then
            terraform apply tfplan
            echo "✅ Terraform apply completed successfully"
          else
            echo "❌ Plan file not found, running fresh apply"
            ENV="${{ needs.detect-changes.outputs.environment }}"
            VARS_FILE=".env/${ENV}/vars.tfvars"
            terraform apply -var-file="${VARS_FILE}" -auto-approve
          fi

      - name: Terraform Output
        id: output
        run: |
          echo "📋 Terraform outputs:"
          cd terraform
          terraform output -json > outputs.json
          terraform output

      - name: Upload outputs artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ needs.detect-changes.outputs.environment }}
          path: terraform/outputs.json
          retention-days: 30

      - name: Commit updated state info
        run: |
          git config --local user.email "anikatech@gmail.com"
          git config --local user.name "anika"
          
          # Create or update infrastructure info file
          ENV="${{ needs.detect-changes.outputs.environment }}"
          INFO_FILE="infrastructure-${ENV}.md"
          
          cat > "${INFO_FILE}" << EOF
          # Infrastructure Status - ${ENV}
          
          **Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Environment:** ${ENV}
          **Authentication:** Base credentials + Assume Role in provider
          **Terraform Version:** ${{ env.TF_VERSION }}
          **Commit:** ${{ github.sha }}
          **Workflow:** ${{ github.run_id }}
          
          ## Terraform Outputs
          
          \`\`\`json
          $(cat terraform/outputs.json)
          \`\`\`
          
          ## Resources Created
          
          This infrastructure deployment includes:
          - EKS Cluster
          - VPC with public/private subnets
          - ArgoCD installation
          - Security groups and IAM roles
          - Environment-specific configurations
          - Deployed via assume role in provider 🔐
          
          EOF
          
          if ! git diff --quiet "${INFO_FILE}" 2>/dev/null; then
            git add "${INFO_FILE}"
            git commit -m "📊 Update infrastructure status for ${ENV} environment (Assume Role)
            
            Environment: ${ENV}
            Authentication: Assume Role in Provider
            Terraform: ${{ env.TF_VERSION }}
            Commit: ${{ github.sha }}
            
            Signed-off-by: anika <anikatech@gmail.com>"
            
            git push origin gitops
            echo "✅ Infrastructure status updated"
          else
            echo "📝 No infrastructure status changes to commit"
          fi

  summary:
    name: Terraform Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, plan, apply]
    if: always() && needs.detect-changes.outputs.terraform-changed == 'true'
    steps:
      - name: Create summary
        run: |
          echo "## 🏗️ Terraform Infrastructure Summary (Assume Role)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.detect-changes.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Authentication:** Base credentials + Assume Role in provider 🔐" >> $GITHUB_STEP_SUMMARY
          echo "**Terraform Version:** ${{ env.TF_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status summary
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Validate:** ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Plan:** ${{ needs.plan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Apply:** ${{ needs.apply.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.apply.result }}" == "success" ]; then
            echo "✅ **Status:** Infrastructure deployment successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Security:** Used assume role in Terraform provider" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. 🔍 Check the infrastructure status file for details" >> $GITHUB_STEP_SUMMARY
            echo "2. 🚀 Deploy applications using the application workflow" >> $GITHUB_STEP_SUMMARY
            echo "3. 📊 Monitor resources in AWS console" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.plan.result }}" == "success" ] && [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "📋 **Status:** Plan completed - review changes in PR comments" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Infrastructure deployment failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Check workflow logs for detailed error messages" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify base AWS credentials are configured correctly" >> $GITHUB_STEP_SUMMARY
            echo "3. Ensure assume role ARNs are correct in tfvars files" >> $GITHUB_STEP_SUMMARY
            echo "4. Validate Terraform configuration syntax" >> $GITHUB_STEP_SUMMARY
            echo "5. Check AWS account permissions and quotas" >> $GITHUB_STEP_SUMMARY
          fi